// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\erons\login-authenticator\src\repository\repository.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\erons\login-authenticator\src\repository\repository.go -destination=C:\Users\erons\login-authenticator\src\repository\gomock_repository\gomock_repository.go -package=mocks_repository
//

// Package mocks_repository is a generated GoMock package.
package mocks_repository

import (
	reflect "reflect"

	models "github.com/eron97/login-authenticator.git/src/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(users []models.CreateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), users)
}

// ReadAllUsers mocks base method.
func (m *MockDatabase) ReadAllUsers() ([]models.GetUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUsers")
	ret0, _ := ret[0].([]models.GetUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUsers indicates an expected call of ReadAllUsers.
func (mr *MockDatabaseMockRecorder) ReadAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUsers", reflect.TypeOf((*MockDatabase)(nil).ReadAllUsers))
}

// VerificExist mocks base method.
func (m *MockDatabase) VerificExist(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificExist", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerificExist indicates an expected call of VerificExist.
func (mr *MockDatabaseMockRecorder) VerificExist(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificExist", reflect.TypeOf((*MockDatabase)(nil).VerificExist), email)
}
